VUE_APP_API_URL=http://192.168.15.205:8000/api

# <script>
# import axios from "axios";

# export default {
#   data() {
#     return {
#       quizzes: [],
#       quiz: null,
#       quizStarted: false,
#       quizEnded: false,
#       currentQuestionIndex: 0,
#       answers: {},
#       mediaRecorder: null,
#       recordedChunks: [],
#       isRecording: false,
#       token: 'your_token_here',
#     };
#   },
#   computed: {
#      currentQuestion() {
#     return this.quiz && this.quiz.questions ? this.quiz.questions[this.currentQuestionIndex] : null;
#   },

#     isLastQuestion() {
#       return this.quiz && this.quiz.questions && this.currentQuestionIndex === this.quiz.questions.length - 1;
#     },
#   },
#   mounted() {
#     this.fetchQuizzes();
#   },
#   methods: {
#     async fetchQuizzes() {
#       try {
#         const token = localStorage.getItem('token');
#         if (!token) {
#           console.error("No token found. Please login.");
#           return;
#         }
#         const response = await axios.get('http://192.168.15.205:8000/api/student/show-quiz', {
#           headers: { Authorization: `Bearer ${token}` },
#         });

#         if (response.data.data && response.data.data.length > 0) {
#           this.quizzes = response.data.data;
#         } else {
#           console.log("No quizzes found for the student.");
#           // document.getElementsByClassName("not-available").style.display = "block";
#         }
#       } catch (error) {
#         console.error("Error fetching quiz data:", error);
#       }
#     },
    
#      async selectQuiz(quiz) {
#   this.quiz = quiz;
#   await this.startAttempt(); // Ensure quiz starts before showing the questions
#   if (this.quizStarted) {
#     this.currentQuestionIndex = 0; // Start from the first question
#   }
# }
# ,
#   async startAttempt() {
#     const token = localStorage.getItem('token');
#     if (!this.quiz || !this.quiz.id) {
#       console.error("Quiz ID is not defined.");
#       return;
#     }

#     try {
#       const response = await axios.post(`http://192.168.15.205:8000/api/start-quiz/${this.quiz.id}`, {}, {
#         headers: {
#           Authorization: `Bearer ${token}`,
#         },
#       });

#       if (response.data.success) {
#         console.log("Quiz started successfully:", response.data);
#         this.quizStarted = true;
#         this.startRecording();
#       } else {
#         console.error("Failed to start quiz:", response.data.message);
#       }
#     } catch (error) {
#       console.error("Error starting the quiz:", error);
#     }
#   },

#     async startAttempt() {
#   const token = localStorage.getItem('token');
#   if (!token) {
#     console.error("No token found. Please login.");
#     return;
#   }

#   try {
#     // Call the start quiz API
#     const response = await axios.post(`http://192.168.15.205:8000/api/start-quiz/${this.quiz.id}`, {}, {
#       headers: {
#         Authorization: `Bearer ${token}`,  // Ensure you pass the token here
#       },
#     });

#     if (response.data.success) {
#       console.log("Quiz started successfully:", response.data);
#       this.quizStarted = true;  // Update the quiz state to started
#       this.startRecording();    // Start video recording
#     } else {
#       console.error("Failed to start quiz:", response.data.message);
#     }
#   } catch (error) {
#     console.error("Error starting the quiz:", error);
#   }
# },

#     async submitAnswer(questionId, selectedOption) {
#       try {
#         const quizId = this.quiz.id; // Assuming you have the quiz ID stored in `this.quiz`
#         const token = localStorage.getItem('token');
#         const response = await axios.post(`http://192.168.15.205:8000/api/answer-quiz/${quizId}/${questionId}`, {
#           selected_option: selectedOption,
#         }, {
#           headers: { Authorization: `Bearer ${token}` },
#         });

#         if (response.data.success) {
#           console.log(response.data.message);
#         } else {
#           console.error("Failed to submit answer:", response.data.message);
#         }
#       } catch (error) {
#         console.error("Error submitting answer:", error);
#       }
#     },

#     nextQuestion() {
#       if (this.currentQuestionIndex < this.quiz.questions.length - 1) {
#         this.currentQuestionIndex += 1;
#       }
#     },
#  startRecording() {
#   if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
#     navigator.mediaDevices.getUserMedia({ video: true, audio: true })
#       .then(stream => {
#         this.mediaRecorder = new MediaRecorder(stream);
#         this.$refs.video.srcObject = stream;  // Assign the stream to the video element
#         this.mediaRecorder.start();

#         // Handle recording data
#         const chunks = [];
#         this.mediaRecorder.ondataavailable = event => {
#           chunks.push(event.data);
#         };

#         this.mediaRecorder.onstop = () => {
#           const blob = new Blob(chunks, { type: 'video/webm' });
#           const videoURL = URL.createObjectURL(blob);
#           console.log("Video recording available at:", videoURL);
#         };

#         console.log("Recording started successfully!");
#       })
#       .catch(error => {
#         console.error("Error accessing media devices:", error);
#       });
#   } else {
#     console.error("Media devices are not supported by your browser.");
#   }
# },

#     async submitQuiz() {
#       this.quizEnded = true;
#       this.stopRecording();
#       const blob = new Blob(this.recordedChunks, { type: "video/webm" });
#       const url = window.URL.createObjectURL(blob);
#       const a = document.createElement("a");
#       a.style.display = "none";
#       a.href = url;
#       a.download = "quiz-recording.webm";
#       document.body.appendChild(a);
#       a.click();
#       window.URL.revokeObjectURL(url);
#       console.log("Quiz submitted and video saved.");
#     },

#     stopRecording() {
#       if (this.mediaRecorder) {
#         this.mediaRecorder.stop();
#         this.isRecording = false;
#         console.log("Recording stopped...");
#       }
#     },
#   },
# };
# </script>